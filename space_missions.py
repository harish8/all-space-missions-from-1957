# AUTOGENERATED! DO NOT EDIT! File to edit: space_missions_eda.ipynb.

# %% auto 0
__all__ = []

# %% space_missions_eda.ipynb 1
import streamlit as st

from streamlit_jupyter import StreamlitPatcher, tqdm
StreamlitPatcher().jupyter() # register streamlit with jupyter-compatible wrappers

from streamlit_folium import st_folium

# %% space_missions_eda.ipynb 3
st.title("All space missions from 1957")

# %% space_missions_eda.ipynb 4
# import necessary packages. 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import folium
from geopy.geocoders import Nominatim
import geocoder

# %% space_missions_eda.ipynb 5
# fetch the data from csv file and store it in a variable. 
space_missions_df = pd.read_csv('./Space_Corrected.csv', index_col=0)

# %% space_missions_eda.ipynb 6
# Rename the columns named `Unnamed: 0` to `index` 
space_missions_df = space_missions_df.rename(columns={"Unnamed: 0" : "index", "Company Name": "company_name", "Status Rocket":"status_rocket"," Rocket": "Rocket", "Status Mission": "status_mission"})

# %% space_missions_eda.ipynb 9
# find if there's missing values. 
space_missions_df[space_missions_df.isna().any(axis=1)]

# %% space_missions_eda.ipynb 12
# fill nan with default 0.0 in the column Rocket
space_missions_df['Rocket'].fillna(0.0, inplace=True)

# %% space_missions_eda.ipynb 13
# check for duplicated rows from Data frame.
space_missions_df.duplicated().sum()

# %% space_missions_eda.ipynb 14
# create two new columns seperating Datum to Date and time.
#create a new column time_zone and store those values in it.
space_missions_df['time_zone'] = space_missions_df['Datum'].str.split(' ').str[5]

#creates a new column taking the original dates and removing timezones from it
space_missions_df['date_um'] = space_missions_df['Datum'].str.replace(space_missions_df['time_zone'][0], '')

#converts the dates into proper datetime format and data type.
space_missions_df['date_um'] = pd.to_datetime(space_missions_df['date_um'], format='mixed')

#create new columns date and time and stores the values in it.
space_missions_df['date']  = space_missions_df['date_um'].dt.date
space_missions_df['time']  = space_missions_df['date_um'].dt.time


# %% space_missions_eda.ipynb 21
launch_locations_count = space_missions_df['Location'].value_counts().reset_index()

# %% space_missions_eda.ipynb 24
for i, launch_location in enumerate(launch_locations_count['Location']):
    split_location_list = launch_location.split(",", 1)
    # location_coordinates = split_location_list
    if(len(split_location_list) > 1):
          location_name = launch_location.split(",", 1)[1]
          g = geocoder.osm(location_name)
          if(g.ok):
                 launch_locations_count.loc[i, 'Location'] = location_name
                 launch_locations_count.loc[i, 'Lat'] = g.lat
                 launch_locations_count.loc[i , 'Long'] = g.lng

# %% space_missions_eda.ipynb 25
# launch_locations_df = pd.DataFrame[launch_locations_count]

# Drop NaN from launch_locations_count
launch_locations_count.dropna(subset=["Location", "count", "Lat", "Long"], inplace=True)

# %% space_missions_eda.ipynb 27
# create markers on world map for each location. 
world_map = folium.Map(location=[0,0], zoom_start=2)

for i,location in launch_locations_count.iterrows():
    folium.Marker(
        location=[location["Lat"], location["Long"]],
        popup=f"Location: {location['Location']}<br>Count: {location['count']}",
        icon=folium.Icon(icon="shuttle-space", prefix='fa',
                         max_width=100)
    ).add_to(world_map)


# %% space_missions_eda.ipynb 28
st_folium(world_map, width="100%")

# %% space_missions_eda.ipynb 29
st.dataframe(space_missions_df)
